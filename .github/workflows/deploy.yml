name: Deploy to AWS ECS

on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR repository URI
        id: ecr
        run: |
          URI=$(aws ecr describe-repositories \
            --repository-names "${{ secrets.ECR_REPOSITORY }}" \
            --query "repositories[0].repositoryUri" \
            --output text)
          echo "REPO_URI=$URI" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build \
            --build-arg AUTH0_SECRET=fake-secret \
            --build-arg APP_BASE_URL=http://localhost:3000 \
            --build-arg AUTH0_DOMAIN=fake.auth0.com \
            --build-arg AUTH0_CLIENT_ID=fake-client-id \
            --build-arg AUTH0_CLIENT_SECRET=fake-client-secret \
            --build-arg MONGODB_URI=mongodb://localhost:27017 \
            --build-arg AWS_ACCESS_KEY_ID=fake-aws-key \
            --build-arg AWS_SECRET_ACCESS_KEY=fake-aws-secret \
            --build-arg AWS_REGION=ap-south-1 \
            --build-arg AWS_S3_BUCKET_NAME=dummy-bucket \
            -t $REPO_URI:$IMAGE_TAG .

      - name: Push Docker image
        run: docker push $REPO_URI:$IMAGE_TAG

      - name: Ensure ECS execution role exists (with SSM access)
        id: iam-role-check
        run: |
          ROLE_EXISTS=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.RoleName' --output text 2>/dev/null || echo "none")
          if [ "$ROLE_EXISTS" = "none" ]; then
            echo "Creating ecsTaskExecutionRole..."
            aws iam create-role \
              --role-name ecsTaskExecutionRole \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": { "Service": "ecs-tasks.amazonaws.com" },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          else
            echo "IAM Role already exists. Skipping creation."
          fi

      - name: Get ECS Task Role ARN
        id: get-role
        run: |
          ROLE_ARN=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.Arn' --output text)
          echo "TASK_ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
          echo "TASK_ROLE_ARN=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Get Current Task Definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ secrets.ECS_TASK_DEFINITION_FAMILY }}" \
            --query taskDefinition \
            > old-task-def.json

      - name: Register New Task Definition (Update Image Only)
        id: register-task
        run: |
          NEW_TASK_DEF=$(jq \
            --arg IMAGE "$REPO_URI:$IMAGE_TAG" \
            --arg EXEC_ROLE "${{ steps.get-role.outputs.TASK_ROLE_ARN }}" \
            --arg TASK_ROLE "${{ steps.get-role.outputs.TASK_ROLE_ARN }}" \
            '.containerDefinitions[0].image = $IMAGE |
             .executionRoleArn = $EXEC_ROLE |
             .taskRoleArn = $TASK_ROLE |
             {
               family,
               networkMode,
               containerDefinitions,
               requiresCompatibilities,
               cpu,
               memory,
               executionRoleArn,
               taskRoleArn
             }' old-task-def.json)

          echo "$NEW_TASK_DEF" > new-task-def.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "${{ secrets.ECS_CLUSTER }}" \
            --service "${{ secrets.ECS_SERVICE }}" \
            --task-definition "${{ steps.register-task.outputs.TASK_DEF_ARN }}" \
            --force-new-deployment
