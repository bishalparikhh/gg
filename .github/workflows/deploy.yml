name: Deploy to AWS ECS

on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR repository URI
        id: ecr
        run: |
          URI=$(aws ecr describe-repositories \
            --repository-names "${{ secrets.ECR_REPOSITORY }}" \
            --query "repositories[0].repositoryUri" \
            --output text)
          echo "REPO_URI=$URI" >> $GITHUB_ENV

      - name: Build Docker image (test with dummy secrets)
        run: |
          docker build --no-cache \
            --build-arg AUTH0_SECRET=fake-secret \
            --build-arg APP_BASE_URL=http://localhost:3000 \
            --build-arg AUTH0_DOMAIN=fake.auth0.com \
            --build-arg AUTH0_CLIENT_ID=fake-client-id \
            --build-arg AUTH0_CLIENT_SECRET=fake-client-secret \
            --build-arg MONGODB_URI=mongodb://localhost:27017 \
            --build-arg AWS_ACCESS_KEY_ID=fake-aws-key \
            --build-arg AWS_SECRET_ACCESS_KEY=fake-aws-secret \
            --build-arg AWS_REGION=ap-south-1 \
            --build-arg AWS_S3_BUCKET_NAME=dummy-bucket \
            -t $REPO_URI:$IMAGE_TAG .


      - name: Push image to ECR
        run: |
          docker push $REPO_URI:$IMAGE_TAG

      - name: Prepare new ECS task definition
        id: task-def
        run: |
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition "${{ secrets.ECS_TASK_DEFINITION_FAMILY }}" \
            --query taskDefinition)

          NEW_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq \
            --arg IMAGE "$REPO_URI:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE | {
              family,
              taskRoleArn,
              executionRoleArn,
              networkMode,
              containerDefinitions,
              requiresCompatibilities,
              cpu,
              memory
            }')

          echo "$NEW_TASK_DEF" > new-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "${{ secrets.ECS_CLUSTER }}" \
            --service "${{ secrets.ECS_SERVICE }}" \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment
